package com.quizagent.service;

import com.quizagent.model.Exercise;
import okhttp3.*;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class GptService {

    @Value("${openai.api.key}")
    private String apiKey;

    private static final String ENDPOINT = "https://api.openai.com/v1/chat/completions";
    private final OkHttpClient client = new OkHttpClient.Builder()
            .connectTimeout(30, java.util.concurrent.TimeUnit.SECONDS)
            .writeTimeout(30, java.util.concurrent.TimeUnit.SECONDS)
            .readTimeout(60, java.util.concurrent.TimeUnit.SECONDS)  // Increase this if needed
            .build();

    public List<Exercise> generateFromText(String inputText, String evaluationType, String bloomLevel){
        try {
            JSONArray messages = new JSONArray();

            String systemPrompt;
            if ("certification".equalsIgnoreCase(evaluationType)) {
                systemPrompt = String.format(
                        "Vous √™tes un expert en ing√©nierie p√©dagogique sp√©cialis√© en sujet de cours. √Ä partir du contenu fourni, g√©n√©rez 5 exercices d‚Äô√©valuation en e-learning selon le niveau de Bloom : %s.\n\n" +

                                "üëâ R√®gles g√©n√©rales :\n" +
                                "- Le format des exercices doit correspondre STRICTEMENT au niveau cognitif cibl√©.\n" +
                                "- Chaque exercice doit √™tre r√©aliste, contextualis√©, et bien d√©taill√© avec noms, r√¥les, chiffres ou cas m√©tier.\n" +
                                "- Le tout doit √™tre renvoy√© sous forme de tableau JSON de 5 objets. Chaque objet contient :\n" +
                                "  - title : titre de l'exercice\n" +
                                "  - instruction : consigne pr√©cise et d√©taill√©e\n" +
                                "  - options : liste d‚Äôoptions (OBLIGATOIRE pour QCM, QCU, texte √† trous uniquement)\n" +
                                "  - answer : r√©ponse attendue ou √©l√©ments de correction\n" +

                                "üîµ Si niveau = M√©moriser :\n" +
                                "- G√©n√©rer exclusivement des QCM, QCU, appariements terme/d√©finition, ou vrai/faux.\n" +
                                "- Exemple : d√©finition de la n√©gociation, r√¥le du BATNA, reconnaissance de termes cl√©s.\n" +

                                "üü† Si niveau = Comprendre :\n" +
                                "- G√©n√©rer des exercices de classement, appariement logique, ou QCU avec justification.\n" +
                                "- Exemple : relier types de n√©gociation √† leur strat√©gie, ordonner les √©tapes d‚Äôun entretien.\n" +

                                "üü° Si niveau = Appliquer :\n" +
                                "- G√©n√©rer des mises en situation avec actions concr√®tes, compl√©tions de dialogue, r√©daction d‚Äôarguments.\n" +
                                "- Exemple : r√©diger 2 arguments dans une simulation client, compl√©ter une r√©plique dans un script.\n" +

                                "üî¥ Si niveau = Analyser :\n" +
                                "- G√©n√©rer des cas √† d√©cortiquer, erreurs √† identifier, comparaisons de m√©thodes.\n" +
                                "- Exemple : identifier les failles dans un √©change mal men√©, proposer 2 pistes d‚Äôam√©lioration.\n" +

                                "üü£ Si niveau = √âvaluer :\n" +
                                "- G√©n√©rer des jugements critiques, comparaisons de postures, √©valuations de simulation.\n" +
                                "- Exemple : comparer deux strat√©gies commerciales, √©valuer un comportement de vente.\n" +

                                "üü¢ Si niveau = Cr√©er :\n" +
                                "- G√©n√©rer des productions originales : r√©diger un argumentaire, concevoir un outil ou sc√©nario.\n" +
                                "- Exemple : cr√©er un argumentaire structur√© selon CAB, inventer une grille de traitement d‚Äôobjections.\n",

                        bloomLevel
                );
            } else {
                systemPrompt =
                        "You are an educational quiz generator. Based on the course content, generate 5 multiple-choice questions.\n" +
                                "- Respond ONLY with a JSON array of 5 objects.\n" +
                                "- Each object must contain: title, instruction, options (list), answer.\n" +
                                "- No introduction, no explanation ‚Äî JSON only.";
            }


            messages.put(new JSONObject().put("role", "system").put("content", systemPrompt));
            messages.put(new JSONObject().put("role", "user").put("content", inputText));

            JSONObject body = new JSONObject()
                    .put("model", "gpt-4o")
                    .put("messages", messages);

            Request request = new Request.Builder()
                    .url(ENDPOINT)
                    .post(RequestBody.create(MediaType.get("application/json"), body.toString()))
                    .addHeader("Authorization", "Bearer " + apiKey)
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            JSONObject responseJson = new JSONObject(responseBody);
            if (!responseJson.has("choices")) {
                throw new IOException("OpenAI API response does not contain 'choices': " + responseBody);
            }

            String content = responseJson
                    .getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content");

            // Extract only the JSON array from the GPT response
            int arrayStart = content.indexOf("[");
            int arrayEnd = content.lastIndexOf("]") + 1;
            String jsonOnly = content.substring(arrayStart, arrayEnd);

            JSONArray array = new JSONArray(jsonOnly);
            List<Exercise> results = new ArrayList<>();

            for (int i = 0; i < array.length(); i++) {
                JSONObject json = array.getJSONObject(i);
                Exercise ex = new Exercise();

                ex.setTitle(json.optString("title", "Untitled Question"));
                ex.setInstruction(json.optString("instruction", "Follow the instructions below."));

                JSONArray opts = json.optJSONArray("options");
                if (opts != null) {
                    List<String> options = new ArrayList<>();
                    for (int j = 0; j < opts.length(); j++) {
                        Object opt = opts.get(j);
                        if (opt instanceof String) {
                            options.add((String) opt);
                        } else if (opt instanceof JSONObject) {
                            options.add(((JSONObject) opt).toString()); // fallback if GPT made a nested object
                        } else {
                            options.add(opt.toString());
                        }
                    }
                    ex.setOptions(options);
                }

                ex.setAnswer(json.optString("answer", ""));
                results.add(ex);
            }

            return results;
        } catch (Exception e) {
            System.out.println("GPT ERROR: " + e.getMessage());

            List<Exercise> exercises = new ArrayList<>();
            for (int i = 1; i <= 5; i++) {
                Exercise ex = new Exercise();
                ex.setTitle("Sample Question " + i);
                ex.setInstruction("Complete this task based on the content.");
                ex.setOptions(List.of("Option A", "Option B", "Option C"));
                ex.setAnswer("Option B");
                exercises.add(ex);
            }
            return exercises;
        }
    }
    public String simpleChat(String message) {
        try {
            JSONArray messages = new JSONArray();
            String systemPrompt = """
            Tu es Minerve, un assistant p√©dagogique. √Ä partir d‚Äôune question d‚Äô√©valuation ou d‚Äôun √©nonc√© de mise en situation, r√©√©cris la m√™me question en y ajoutant davantage de d√©tails concrets.

            Ta mission :
            - Conserve exactement la structure et l‚Äôintention p√©dagogique de la question d‚Äôorigine.
            - Ajoute des √©l√©ments r√©alistes : noms de personnes, contexte d‚Äôentreprise, produits/services pr√©cis, chiffres, objectifs, enjeux, contraintes, etc.
            - La nouvelle version doit √™tre plus immersive et aider l‚Äôapprenant √† mieux comprendre la probl√©matique.

            Ne donne pas de conseils. Ne liste pas d‚Äôam√©liorations. R√©ponds uniquement avec une version enrichie de la question en une seule fois, sans explication.

            R√©ponds toujours en fran√ßais.
        """;

            messages.put(new JSONObject().put("role", "system").put("content", systemPrompt));
            messages.put(new JSONObject().put("role", "user").put("content", message));

            JSONObject body = new JSONObject()
                    .put("model", "gpt-4o")
                    .put("messages", messages);

            Request request = new Request.Builder()
                    .url(ENDPOINT)
                    .post(RequestBody.create(MediaType.get("application/json"), body.toString()))
                    .addHeader("Authorization", "Bearer " + apiKey)
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            JSONObject responseJson = new JSONObject(responseBody);
            return responseJson
                    .getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content");
        } catch (Exception e) {
            return "Erreur: " + e.getMessage();
        }
    }
}